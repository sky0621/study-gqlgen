// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Node interface {
	IsNode()
}

type MutationResponse struct {
	ID *string `json:"id"`
}

// https://graphql.org/learn/schema/#scalar-types
// https://github.com/99designs/gqlgen/blob/master/docs/content/reference/scalars.md
type NonNullType struct {
	// ID型 - ID!
	ID string `json:"id"`
	// UTF8文字列型 - String!
	StringNonNull string `json:"stringNonNull"`
	// 符号付き32bit整数型 - Int!
	IntNonNull int `json:"intNonNull"`
	// 符号付き倍精度浮動小数点数型 - Float!
	FloatNonNull float64 `json:"floatNonNull"`
	// 真偽値型 - Boolean!
	BooleanNonNull bool `json:"booleanNonNull"`
	// 日付型 - Date!
	DateNonNull string `json:"dateNonNull"`
	// 列挙型 - Signal!
	SignalNonNull Signal `json:"signalNonNull"`
	// 時刻型(gqlgenビルトイン) - Time!
	TimeNonNull time.Time `json:"timeNonNull"`
	// マップ型(gqlgenビルトイン) - Map!
	MapNonNull map[string]interface{} `json:"mapNonNull"`
	// アップロード型(gqlgenビルトイン) - Upload!
	UploadNonNull graphql.Upload `json:"uploadNonNull"`
	// なんでもあり型(gqlgenビルトイン) - Any!
	AnyNonNull interface{} `json:"anyNonNull"`
	// カスタムScalar型 - YesNo!
	YesNoNonNull YesNo `json:"yesNoNonNull"`
	// Object構造型 - Object!
	ObjectNonNull *Object `json:"objectNonNull"`
	// 文字列型配列 - [String!]!
	StringsNonNull []string `json:"stringsNonNull"`
	// マップ型配列 - [Map!]!
	MapsNonNull []map[string]interface{} `json:"mapsNonNull"`
	// なんでもあり型配列 - [Any!]!
	AnyTypesNonNull []interface{} `json:"anyTypesNonNull"`
	// Object構造型配列 - [Object!]!
	ObjectsNonNull []*Object `json:"objectsNonNull"`
}

func (NonNullType) IsNode() {}

type NoopInput struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NoopPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NullableType struct {
	// ID型 - ID!
	ID string `json:"id"`
	// UTF8文字列型 - String
	StringNullable *string `json:"stringNullable"`
	// 符号付き32bit整数型 - Int
	IntNullable *int `json:"intNullable"`
	// 符号付き倍精度浮動小数点数型 - Float
	FloatNullable *float64 `json:"floatNullable"`
	// 真偽値型 - Boolean
	BooleanNullable *bool `json:"booleanNullable"`
	// 日付型 - Date
	DateNullable *string `json:"dateNullable"`
	// 列挙型 - Signal
	SignalNullable *Signal `json:"signalNullable"`
	// 時刻型(gqlgenビルトイン) - Time
	TimeNullable *time.Time `json:"timeNullable"`
	// マップ型(gqlgenビルトイン) - Map
	MapNullable map[string]interface{} `json:"mapNullable"`
	// アップロード型(gqlgenビルトイン) - Upload
	UploadNullable *graphql.Upload `json:"uploadNullable"`
	// なんでもあり型(gqlgenビルトイン) - Any
	AnyNullable interface{} `json:"anyNullable"`
	// カスタムScalar型 - YesNo
	YesNoNullable *YesNo `json:"yesNoNullable"`
	// Object構造型 - Object
	ObjectNullable *Object `json:"objectNullable"`
	// 文字列型配列 - [String]
	StringsNullable []*string `json:"stringsNullable"`
	// 文字列型配列 - [String]!
	StringsObjectNullable []*string `json:"stringsObjectNullable"`
	// 文字列型配列 - [String!]
	StringsArrayNullable []string `json:"stringsArrayNullable"`
	// マップ型配列 - [Map]
	MapsNullable []map[string]interface{} `json:"mapsNullable"`
	// マップ型配列 - [Map]!
	MapsObjectNullable []map[string]interface{} `json:"mapsObjectNullable"`
	// マップ型配列 - [Map!]
	MapsArrayNullable []map[string]interface{} `json:"mapsArrayNullable"`
	// なんでもあり型配列 - [Any]
	AnyTypesNullable []interface{} `json:"anyTypesNullable"`
	// なんでもあり型配列 - [Any]!
	AnyTypesObjectNullable []interface{} `json:"anyTypesObjectNullable"`
	// なんでもあり型配列 - [Any!]
	AnyTypesArrayNullable []interface{} `json:"anyTypesArrayNullable"`
	// Object構造型配列 - [Object]
	ObjectsNullable []*Object `json:"objectsNullable"`
	// Object構造型配列 - [Object]!
	ObjectsObjectNullable []*Object `json:"objectsObjectNullable"`
	// Object構造型配列 - [Object!]
	ObjectsArrayNullable []*Object `json:"objectsArrayNullable"`
}

func (NullableType) IsNode() {}

type Object struct {
	ID string `json:"id"`
}

func (Object) IsNode() {}

type Signal string

const (
	SignalRed    Signal = "RED"
	SignalYellow Signal = "YELLOW"
	SignalGreen  Signal = "GREEN"
)

var AllSignal = []Signal{
	SignalRed,
	SignalYellow,
	SignalGreen,
}

func (e Signal) IsValid() bool {
	switch e {
	case SignalRed, SignalYellow, SignalGreen:
		return true
	}
	return false
}

func (e Signal) String() string {
	return string(e)
}

func (e *Signal) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Signal(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Signal", str)
	}
	return nil
}

func (e Signal) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
