// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Node interface {
	IsNode()
}

type MutationResponse struct {
	ID *string `json:"id"`
}

// https://graphql.org/learn/schema/#scalar-types
// https://github.com/99designs/gqlgen/blob/master/docs/content/reference/scalars.md
type NonNullType struct {
	// ID型 - ID!
	ID string `json:"id"`
	// UTF8文字列型 - String!
	StrNonNull string `json:"strNonNull"`
	// 符号付き32bit整数型 - Int!
	IntNonNull int `json:"intNonNull"`
	// 符号付き倍精度浮動小数点数型 - Float!
	FloatNonNull float64 `json:"floatNonNull"`
	// 真偽値型 - Boolean!
	BooleanNonNull bool `json:"booleanNonNull"`
	// 日付型 - Date!
	DateNonNull string `json:"dateNonNull"`
	// 列挙型 - Signal!
	SignalNonNull Signal `json:"signalNonNull"`
	// 時刻型(gqlgenビルトイン) - Time!
	TimeNonNull time.Time `json:"timeNonNull"`
	// マップ型(gqlgenビルトイン) - Map!
	MapNonNull map[string]interface{} `json:"mapNonNull"`
	// アップロード型(gqlgenビルトイン) - Upload!
	UploadNonNull graphql.Upload `json:"uploadNonNull"`
	// なんでもあり型(gqlgenビルトイン) - Any!
	AnyNonNull interface{} `json:"anyNonNull"`
	// Object構造型 - SomeType!
	SomeTypeNonNull *SomeType `json:"someTypeNonNull"`
	// Object構造型配列 - [SomeType!]!
	SomeTypesNonNull []*SomeType `json:"someTypesNonNull"`
	// カスタムScalar型 - CustomScalar!
	CustomScalarNonNull CustomScalar `json:"customScalarNonNull"`
}

func (NonNullType) IsNode() {}

type NoopInput struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NoopPayload struct {
	ClientMutationID *string `json:"clientMutationId"`
}

type NullableType struct {
	// ID型 - ID!
	ID string `json:"id"`
	// UTF8文字列型 - String
	StrNullable *string `json:"strNullable"`
	// 符号付き32bit整数型 - Int
	IntNullable *int `json:"intNullable"`
	// 符号付き倍精度浮動小数点数型 - Float
	FloatNullable *float64 `json:"floatNullable"`
	// 真偽値型 - Boolean
	BooleanNullable *bool `json:"booleanNullable"`
	// 日付型 - Date
	DateNullable *string `json:"dateNullable"`
	// 列挙型 - Signal
	SignalNullable *Signal `json:"signalNullable"`
	// 時刻型(gqlgenビルトイン) - Time
	TimeNullable *time.Time `json:"timeNullable"`
	// マップ型(gqlgenビルトイン) - Map
	MapNullable map[string]interface{} `json:"mapNullable"`
	// アップロード型(gqlgenビルトイン) - Upload
	UploadNullable *graphql.Upload `json:"uploadNullable"`
	// なんでもあり型(gqlgenビルトイン) - Any
	AnyNullable interface{} `json:"anyNullable"`
	// Object構造型 - SomeType
	SomeTypeNullable *SomeType `json:"someTypeNullable"`
	// Object構造型配列 - [SomeType!]
	SomeTypesArrayNullable []*SomeType `json:"someTypesArrayNullable"`
	// Object構造型配列 - [SomeType]!
	SomeTypesObjectNullable []*SomeType `json:"someTypesObjectNullable"`
	// Object構造型配列 - [SomeType]
	SomeTypesNullable []*SomeType `json:"someTypesNullable"`
	// カスタムScalar型 - CustomScalar
	CustomScalarNullable *CustomScalar `json:"customScalarNullable"`
}

func (NullableType) IsNode() {}

type SomeType struct {
	ID string `json:"id"`
}

func (SomeType) IsNode() {}

type Signal string

const (
	SignalRed    Signal = "RED"
	SignalYellow Signal = "YELLOW"
	SignalGreen  Signal = "GREEN"
)

var AllSignal = []Signal{
	SignalRed,
	SignalYellow,
	SignalGreen,
}

func (e Signal) IsValid() bool {
	switch e {
	case SignalRed, SignalYellow, SignalGreen:
		return true
	}
	return false
}

func (e Signal) String() string {
	return string(e)
}

func (e *Signal) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Signal(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Signal", str)
	}
	return nil
}

func (e Signal) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Unit string

const (
	UnitKm Unit = "KM"
	UnitM  Unit = "M"
	UnitCm Unit = "CM"
)

var AllUnit = []Unit{
	UnitKm,
	UnitM,
	UnitCm,
}

func (e Unit) IsValid() bool {
	switch e {
	case UnitKm, UnitM, UnitCm:
		return true
	}
	return false
}

func (e Unit) String() string {
	return string(e)
}

func (e *Unit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Unit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Unit", str)
	}
	return nil
}

func (e Unit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
